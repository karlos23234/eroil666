import os
import json
import requests
import time
from datetime import datetime
import threading
from flask import Flask, request
import telebot
import re  # ’Ä’°’Ω÷Å’•’´ ’æ’°’æ’•÷Ä’°÷Å’¥’°’∂ ’∞’°’¥’°÷Ä

# ===== ‘ø’°÷Ä’£’°’æ’∏÷Ä’∏÷Ç’¥’∂’•÷Ä =====
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

if not BOT_TOKEN or not WEBHOOK_URL:
    raise ValueError("’ä’•’ø÷Ñ ’ß ’Ω’°’∞’¥’°’∂’•’¨ BOT_TOKEN ÷á WEBHOOK_URL ÷É’∏÷É’∏’≠’°’Ø’°’∂’∂’•÷Ä’®")

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

# ’ñ’°’µ’¨’°’µ’´’∂ ’Ø’°÷Ä’£’°’æ’∏÷Ä’∏÷Ç’¥’∂’•÷Ä
USERS_FILE = "users.json"  # ’ï’£’ø’°’ø’•÷Ä’•÷Ä’´ ’ø’æ’µ’°’¨’∂’•÷Ä
SENT_TX_FILE = "sent_txs.json"  # ’à÷Ç’≤’°÷Ä’Ø’æ’°’Æ ’£’∏÷Ä’Æ’°÷Ä÷Ñ’∂’•÷Ä
LOG_FILE = "bot.log"  # ’ç’≠’°’¨’∂’•÷Ä’´ ’¨’∏’£

# ===== ’ï’™’°’∂’§’°’Ø ÷Ü’∏÷Ç’∂’Ø÷Å’´’°’∂’•÷Ä =====
def log_error(message):
    """’ç’≠’°’¨’∂’•÷Ä’´ ’¨’∏’£’°’æ’∏÷Ä’∏÷Ç’¥"""
    with open(LOG_FILE, "a") as f:
        f.write(f"{datetime.now()}: {message}\n")

def load_json(filename):
    """JSON ÷Ü’°’µ’¨’´ ’¢’•’º’∂’∏÷Ç’¥"""
    try:
        if os.path.exists(filename):
            with open(filename, "r", encoding="utf-8") as f:
                return json.load(f)
        return {}
    except Exception as e:
        log_error(f"’â’∞’°’ª’∏’≤’æ’•÷Å ’¢’•’º’∂’•’¨ {filename}: {e}")
        return {}

def save_json(filename, data):
    """JSON ÷Ü’°’µ’¨’´ ’∫’°’∞’∫’°’∂’∏÷Ç’¥"""
    try:
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        log_error(f"’â’∞’°’ª’∏’≤’æ’•÷Å ’∫’°’∞’∫’°’∂’•’¨ {filename}: {e}")

# ’è’æ’µ’°’¨’∂’•÷Ä’´ ’¢’•’º’∂’∏÷Ç’¥
users = load_json(USERS_FILE)  # {user_id: [address1, address2]}
sent_txs = load_json(SENT_TX_FILE)  # {user_id: {address: [tx1, tx2]}}

# ===== Dash ’∞’°’Ω÷Å’•’´ ’æ’°’æ’•÷Ä’°÷Å’∏÷Ç’¥ =====
def is_valid_dash_address(address):
    """’ç’ø’∏÷Ç’£’∏÷Ç’¥ ’ß Dash ’∞’°’Ω÷Å’•’´ ’≥’´’∑’ø ’±÷á’°’π’°÷É’®"""
    return re.match(r'^X[a-zA-Z0-9]{33}$', address) is not None

# ===== API ÷Ü’∏÷Ç’∂’Ø÷Å’´’°’∂’•÷Ä =====
def get_dash_price():
    """’ç’ø’°’∂’∏÷Ç’¥ ’ß Dash-’´ ’£’´’∂’® USD-’∏’æ"""
    try:
        response = requests.get(
            "https://api.coingecko.com/api/v3/simple/price?ids=dash&vs_currencies=usd",
            timeout=10
        )
        return response.json().get("dash", {}).get("usd")
    except Exception as e:
        log_error(f"‘≥’∂’´ ’Ω’ø’°÷Å’¥’°’∂ ’Ω’≠’°’¨: {e}")
        return None

def get_transactions(address):
    """’ç’ø’°’∂’∏÷Ç’¥ ’ß ’æ’•÷Ä’ª’´’∂ ’£’∏÷Ä’Æ’°÷Ä÷Ñ’∂’•÷Ä’®"""
    try:
        response = requests.get(
            f"https://api.blockchair.com/dash/dash/transactions?q=recipient({address})&limit=10",
            timeout=20
        )
        return response.json().get("data", [])
    except Exception as e:
        log_error(f"‘≥’∏÷Ä’Æ’°÷Ä÷Ñ’∂’•÷Ä’´ ’Ω’ø’°÷Å’¥’°’∂ ’Ω’≠’°’¨ {address}-’´ ’∞’°’¥’°÷Ä: {e}")
        return []

# ===== ‘∂’£’∏÷Ç’∑’°÷Å’∏÷Ç’¥’∂’•÷Ä’´ ’±÷á’°’π’°÷É’°’æ’∏÷Ä’∏÷Ç’¥ =====
def format_alert(tx, address, tx_count, price=None):
    """’ç’ø’•’≤’Æ’∏÷Ç’¥ ’ß ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂ ’∂’∏÷Ä ’£’∏÷Ä’Æ’°÷Ä÷Ñ’´ ’¥’°’Ω’´’∂"""
    txid = tx["hash"]
    amount = tx["output_total"] / 1e8  # ’ç’°’ø’∏’∑’´’´÷Å DASH
    
    if amount <= 0:
        return None

    # USD ’°÷Ä’™’•÷Ñ (’•’©’• ’£’´’∂’® ’∞’°’Ω’°’∂’•’¨’´ ’ß)
    usd_value = f" (${amount * price:.2f})" if price else ""
    
    # ‘∫’°’¥’°’∂’°’Ø’´ ’±÷á’°’π’°÷É’°’æ’∏÷Ä’∏÷Ç’¥
    tx_time = tx.get("time")
    if tx_time:
        tx_time = datetime.strptime(tx_time, "%Y-%m-%d %H:%M:%S").strftime("%Y-%m-%d %H:%M:%S")
    else:
        tx_time = "’ç’∫’°’Ω’æ’∏÷Ç’¥ ’ß ’∞’°’Ω’ø’°’ø’∏÷Ç’¥"

    return (
        f"üîî <b>’Ü’∏÷Ä ’£’∏÷Ä’Æ’°÷Ä÷Ñ #{tx_count}!</b>\n\n"
        f"üìå ’Ä’°’Ω÷Å’•: <code>{address}</code>\n"
        f"üí∞ ‘≥’∏÷Ç’¥’°÷Ä: <b>{amount:.8f} DASH</b>{usd_value}\n"
        f"üïí ‘∫’°’¥’°’∂’°’Ø: {tx_time}\n"
        f"üîó <a href='https://blockchair.com/dash/transaction/{txid}'>‘¥’´’ø’•’¨ Blockchair-’∏÷Ç’¥</a>"
    )

# ===== Telegram ’∞÷Ä’°’¥’°’∂’∂’•÷Ä =====
@bot.message_handler(commands=['start', 'help'])
def start(message):
    """’ç’Ø’¶’¢’∂’°’Ø’°’∂ ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂"""
    bot.reply_to(message,
        "‘≤’°÷Ä÷á üëã ‘±’µ’Ω ’¢’∏’ø’® ’©’∏÷Ç’µ’¨ ’ß ’ø’°’¨’´’Ω ’∞’•’ø÷á’•’¨ Dash ’∞’°’Ω÷Å’•’∂’•÷Ä’´’∂:\n\n"
        "’Ä÷Ä’°’¥’°’∂’∂’•÷Ä:\n"
        "/add [’∞’°’Ω÷Å’•] - ‘±’æ’•’¨’°÷Å’∂’•’¨ ’∞’°’Ω÷Å’•\n"
        "/list - ’ë’∏÷Ç÷Å’°’§÷Ä’•’¨ ’¢’∏’¨’∏÷Ä ’∞’°’Ω÷Å’•’∂’•÷Ä’®\n"
        "/remove [’∞’°’Ω÷Å’•] - ’Ä’•’º’°÷Å’∂’•’¨ ’∞’°’Ω÷Å’•\n"
        "/price - ’è’•’Ω’∂’•’¨ Dash-’´ ’®’∂’©’°÷Å’´’Ø ’£’´’∂’®"
    )

@bot.message_handler(commands=['price'])
def send_price(message):
    """’à÷Ç’≤’°÷Ä’Ø’∏÷Ç’¥ ’ß Dash-’´ ’®’∂’©’°÷Å’´’Ø ’£’´’∂’®"""
    price = get_dash_price()
    if price:
        bot.reply_to(message, f"üí∞ Dash-’´ ’®’∂’©’°÷Å’´’Ø ’£’´’∂’®: ${price:.2f}")
    else:
        bot.reply_to(message, "‚ùå ’â’∞’°’ª’∏’≤’æ’•÷Å ’Ω’ø’°’∂’°’¨ ’£’´’∂’®")

# ... (’°’µ’¨ ’∞÷Ä’°’¥’°’∂’∂’•÷Ä’´ ’§’´’¥’°÷Å’±’•÷Ä) ...

# ===== ’Ä’´’¥’∂’°’Ø’°’∂ ’¥’∏’∂’´’ø’∏÷Ä’´’∂’£’´ ÷Å’´’Ø’¨ =====
def monitor():
    while True:
        try:
            price = get_dash_price()
            
            for user_id, addresses in users.items():
                for address in addresses:
                    # ’ç’ø’°’∂’°’¨ ’∂’∏÷Ä ’£’∏÷Ä’Æ’°÷Ä÷Ñ’∂’•÷Ä
                    transactions = get_transactions(address)
                    
                    # ’ç’ø’∏÷Ç’£’•’¨ ’∂’∏÷Ä ’£’∏÷Ä’Æ’°÷Ä÷Ñ’∂’•÷Ä’®
                    known_txs = sent_txs.get(user_id, {}).get(address, [])
                    new_txs = [tx for tx in transactions if tx["hash"] not in known_txs]
                    
                    # ’à÷Ç’≤’°÷Ä’Ø’•’¨ ’¶’£’∏÷Ç’∑’°÷Å’∏÷Ç’¥’∂’•÷Ä
                    for tx in new_txs:
                        alert = format_alert(tx, address, len(known_txs)+1, price)
                        if alert:
                            try:
                                bot.send_message(user_id, alert, disable_web_page_preview=True)
                                # ’ä’°’∞’∫’°’∂’•’¨ ’∏÷Ç’≤’°÷Ä’Ø’æ’°’Æ ’£’∏÷Ä’Æ’°÷Ä÷Ñ’®
                                sent_txs.setdefault(user_id, {}).setdefault(address, []).append(tx["hash"])
                            except Exception as e:
                                log_error(f"’Ä’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’°’∂ ’∏÷Ç’≤’°÷Ä’Ø’¥’°’∂ ’Ω’≠’°’¨ {user_id}-’´’∂: {e}")
            
            # ’ä’°’∞’∫’°’∂’•’¨ ’ø’æ’µ’°’¨’∂’•÷Ä’®
            save_json(SENT_TX_FILE, sent_txs)
            time.sleep(60)  # ’ç’ø’∏÷Ç’£’•’¨ ’°’¥’•’∂ 1 ÷Ä’∏’∫’•’∂ ’¥’•’Ø
            
        except Exception as e:
            log_error(f"’Ñ’∏’∂’´’ø’∏÷Ä’´’∂’£’´ ’Ω’≠’°’¨: {e}")
            time.sleep(300)  # ’ç’∫’°’Ω’•’¨ 5 ÷Ä’∏’∫’• ’Ω’≠’°’¨’´ ’§’•’∫÷Ñ’∏÷Ç’¥

# ===== Flask ’Ω’•÷Ä’æ’•÷Ä Render-’´ ’∞’°’¥’°÷Ä =====
app = Flask(__name__)

@app.route("/")
def home():
    return "Dash Monitor Bot is running!"

@app.route(f"/{BOT_TOKEN}", methods=["POST"])
def webhook():
    json_str = request.get_data().decode("utf-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "OK", 200

# ===== ‘≥’∏÷Ä’Æ’°÷Ä’Ø’∏÷Ç’¥ =====
if __name__ == "__main__":
    # ’Ñ’•’Ø’∂’°÷Ä’Ø’•’¨ ’¥’∏’∂’´’ø’∏÷Ä’´’∂’£’´ ’©÷Ä’•’§’®
    threading.Thread(target=monitor, daemon=True).start()
    
    # ‘ø’°÷Ä’£’°’æ’∏÷Ä’•’¨ webhook-’®
    bot.remove_webhook()
    time.sleep(1)
    bot.set_webhook(url=WEBHOOK_URL)
    
    # ’Ñ’•’Ø’∂’°÷Ä’Ø’•’¨ Flask ’Ω’•÷Ä’æ’•÷Ä’®
    app.run(host="0.0.0.0", port=5000)

